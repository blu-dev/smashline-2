searchState.loadedDescShard("locks", 0, "Drop-in replacements for the standard <code>Mutex</code> and <code>RwLock</code>\nLocking primitive for mutually-exclusive access\nRAII guard for a mutex lock, will unlock the mutex upon …\nLocking primitive for reader-writer shared access\nRAII guard for a reader lock, will release read access …\nRAII guard for a writer lock, will release write access …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the underlying data, which we …\nGets a mutable reference to the underlying data, which we …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this mutex and returns the inner data\nConsumes the lock and returns the underlying data\nLocks the mutex and acquires an exclusive reference, …\nConstructs a new mutex with the provided data\nConstructs a new reader-writer lock with the provided data\nAcquires a read-only reference to the underlying data. …\nAttempts to lock the mutex for an exclusive reference. …\nAttempts to acquire a read-only reference to the data. …\nAttempts to acquire an exclusive reference to the data. …\nAcquires a mutable reference to the underlying data. This …")